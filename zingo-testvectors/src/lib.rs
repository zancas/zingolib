pub const BASE_HEIGHT: u32 = 3;
pub const MAINNET_ALPHA_VIEWKEY: &str = "uview1ah2qw247djujxwu5tdr20t7naaqvd5qkljxtm0yrw92tzy6fvafdhv7uchvsrzxaqskc7mxphzafgn5aca6pscrdx8xqu95ruyefng0hcctsnle4jq9f97gvymlf78pal7zqwf3yfej6han20pvhj0j0ew05dzq685kx29phyy5ffuw63wxmvesm9r23jhccfrdm9yxr5tz4hkw40t0ak5j4lgr67zdcl9rhluaqwatudjhaq0lep5ffcc8yrruvf0tz9zmxl5zfg9lx728mwdz4705wsr9fr8h4u7nc5ja8c560j45jn0jqty8hcqjedjakjkj04najmvzk4fr0g9kevshe6verg8h9pr4phx86wsc2xa5rdp78zrr5upuyqanhk98w4u3vs9mssdnxrwe9xf4qlffqq46faaxuvnsst4mn87eyk4j6h4jm6t3kzcmwh0waw8u5500yqyfm35ndcerzkx8xr5xaznqrma0zy69qvgz7nnyq";
pub mod seed_phrases {
    pub const DARKSIDE: &str =
"still champion voice habit trend flight survey between bitter process artefact blind carbon truly provide dizzy crush flush breeze blouse charge solid fish spread";
    #[test]
    fn validate_seeds() {
        let abandon_art_phrase = zcash_primitives::zip339::Mnemonic::from_entropy([0; 32])
            .unwrap()
            .to_string();
        assert_eq!(ABANDON_ART, abandon_art_phrase);
        // TODO user get_zaddr_from_bip39seed to generate this address from that seed.
    }
    //Generate test seed
    pub const ABANDON_ART: &str =
        "abandon abandon abandon abandon abandon abandon abandon abandon \
     abandon abandon abandon abandon abandon abandon abandon abandon \
     abandon abandon abandon abandon abandon abandon abandon art";
    pub const HOSPITAL_MUSEUM: &str = "hospital museum valve antique skate museum \
     unfold vocal weird milk scale social vessel identify \
     crowd hospital control album rib bulb path oven civil tank";
    pub const CHIMNEY_BETTER: &str = "chimney better bulb horror rebuild whisper improve intact letter giraffe brave rib appear bulk aim burst snap salt hill sad merge tennis phrase raise";
    pub const MAINNET_ALPHA_SEED_FORVIEW_ALPA: &str = "kitchen rubber iron retreat machine boring scrap tower awkward dynamic night double involve erode ski noise much total dumb lyrics purse tattoo sick wash";
}

// faucet addresses
pub const REG_O_ADDR_FROM_ABANDONART: &str = "uregtest1zkuzfv5m3yhv2j4fmvq5rjurkxenxyq8r7h4daun2zkznrjaa8ra8asgdm8wwgwjvlwwrxx7347r8w0ee6dqyw4rufw4wg9djwcr6frzkezmdw6dud3wsm99eany5r8wgsctlxquu009nzd6hsme2tcsk0v3sgjvxa70er7h27z5epr67p5q767s2z5gt88paru56mxpm6pwz0cu35m";
pub const REG_Z_ADDR_FROM_ABANDONART: &str =
    "zregtestsapling1fmq2ufux3gm0v8qf7x585wj56le4wjfsqsj27zprjghntrerntggg507hxh2ydcdkn7sx8kya7p";
pub const REG_T_ADDR_FROM_ABANDONART: &str = "tmBsTi2xWTjUdEXnuTceL7fecEQKeWaPDJd";

// regtest block rewards
pub mod block_rewards {
    pub const SAPLING: u64 = 500_000_000;
    pub const BLOSSOM: u64 = 500_000_000;
    pub const CANOPY: u64 = 625_000_000;
}

// Burn-to regtest address generated by `zcash-cli getnewaddress`
pub const EXT_TADDR: &str = "tmJTBtMwPU96XteSiP89xDz1WARNgRddEHq";

pub mod config_template_fillers {
    pub mod zcashd {
        use zcash_primitives::consensus::NetworkUpgrade;

        pub fn basic(
            rpcport: &str,
            regtest_network: &zingoconfig::RegtestNetwork,
            extra: &str,
        ) -> String {
            let overwinter_activation_height = regtest_network
                .activation_height(NetworkUpgrade::Overwinter)
                .unwrap();
            let sapling_activation_height = regtest_network
                .activation_height(NetworkUpgrade::Sapling)
                .unwrap();
            let blossom_activation_height = regtest_network
                .activation_height(NetworkUpgrade::Blossom)
                .unwrap();
            let heartwood_activation_height = regtest_network
                .activation_height(NetworkUpgrade::Heartwood)
                .unwrap();
            let canopy_activation_height = regtest_network
                .activation_height(NetworkUpgrade::Canopy)
                .unwrap();
            let orchard_activation_height = regtest_network
                .activation_height(NetworkUpgrade::Nu5)
                .unwrap();

            format!("\
### Blockchain Configuration
regtest=1
nuparams=5ba81b19:{overwinter_activation_height} # Overwinter
nuparams=76b809bb:{sapling_activation_height} # Sapling
nuparams=2bb40e60:{blossom_activation_height} # Blossom
nuparams=f5b9230b:{heartwood_activation_height} # Heartwood
nuparams=e9ff75a6:{canopy_activation_height} # Canopy
nuparams=c2d6d0b4:{orchard_activation_height} # NU5 (Orchard)

### MetaData Storage and Retrieval
# txindex:
# https://zcash.readthedocs.io/en/latest/rtd_pages/zcash_conf_guide.html#miscellaneous-options
txindex=1
# insightexplorer:
# https://zcash.readthedocs.io/en/latest/rtd_pages/insight_explorer.html?highlight=insightexplorer#additional-getrawtransaction-fields
insightexplorer=1
experimentalfeatures=1

### RPC Server Interface Options:
# https://zcash.readthedocs.io/en/latest/rtd_pages/zcash_conf_guide.html#json-rpc-options
rpcuser=xxxxxx
rpcpassword=xxxxxx
rpcport={rpcport}
rpcallowip=127.0.0.1

# Buried config option to allow non-canonical RPC-PORT:
# https://zcash.readthedocs.io/en/latest/rtd_pages/zcash_conf_guide.html#zcash-conf-guide
listen=0

{extra}"
            )
        }
        pub fn funded(
            mineraddress: &str,
            rpcport: &str,
            regtest_network: &zingoconfig::RegtestNetwork,
        ) -> String {
            basic(rpcport, regtest_network,
                &format!("\
### Zcashd Help provides documentation of the following:
mineraddress={mineraddress}
minetolocalwallet=0 # This is set to false so that we can mine to a wallet, other than the zcashd wallet."
                )
            )
        }

        #[test]
        fn funded_zcashd_conf() {
            let regtest_network = zingoconfig::RegtestNetwork::new(1, 2, 3, 4, 5, 6);
            assert_eq!(
                        funded(
                            super::super::REG_Z_ADDR_FROM_ABANDONART,
                            "1234",
                            &regtest_network
                        ),
                        format!("\
### Blockchain Configuration
regtest=1
nuparams=5ba81b19:1 # Overwinter
nuparams=76b809bb:2 # Sapling
nuparams=2bb40e60:3 # Blossom
nuparams=f5b9230b:4 # Heartwood
nuparams=e9ff75a6:5 # Canopy
nuparams=c2d6d0b4:6 # NU5 (Orchard)

### MetaData Storage and Retrieval
# txindex:
# https://zcash.readthedocs.io/en/latest/rtd_pages/zcash_conf_guide.html#miscellaneous-options
txindex=1
# insightexplorer:
# https://zcash.readthedocs.io/en/latest/rtd_pages/insight_explorer.html?highlight=insightexplorer#additional-getrawtransaction-fields
insightexplorer=1
experimentalfeatures=1

### RPC Server Interface Options:
# https://zcash.readthedocs.io/en/latest/rtd_pages/zcash_conf_guide.html#json-rpc-options
rpcuser=xxxxxx
rpcpassword=xxxxxx
rpcport=1234
rpcallowip=127.0.0.1

# Buried config option to allow non-canonical RPC-PORT:
# https://zcash.readthedocs.io/en/latest/rtd_pages/zcash_conf_guide.html#zcash-conf-guide
listen=0

### Zcashd Help provides documentation of the following:
mineraddress=zregtestsapling1fmq2ufux3gm0v8qf7x585wj56le4wjfsqsj27zprjghntrerntggg507hxh2ydcdkn7sx8kya7p
minetolocalwallet=0 # This is set to false so that we can mine to a wallet, other than the zcashd wallet."
                        )
                    );
        }
    }
    pub mod lightwalletd {
        pub fn basic(rpcport: &str) -> String {
            format!(
                "\
# # Default zingo lib lightwalletd conf YAML for regtest mode # #
grpc-bind-addr: 127.0.0.1:{rpcport}
cache-size: 10
log-file: ../logs/lwd.log
log-level: 10
zcash-conf-path: ../conf/zcash.conf

# example config for TLS
#tls-cert: /secrets/lightwallted/example-only-cert.pem
#tls-key: /secrets/lightwallted/example-only-cert.key"
            )
        }

        #[test]
        fn basic_lightwalletd_conf() {
            assert_eq!(
                basic("1234"),
                format!(
                    "\
# # Default zingo lib lightwalletd conf YAML for regtest mode # #
grpc-bind-addr: 127.0.0.1:1234
cache-size: 10
log-file: ../logs/lwd.log
log-level: 10
zcash-conf-path: ../conf/zcash.conf

# example config for TLS
#tls-cert: /secrets/lightwallted/example-only-cert.pem
#tls-key: /secrets/lightwallted/example-only-cert.key"
                )
            )
        }
    }
}
